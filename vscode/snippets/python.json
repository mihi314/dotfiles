{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"embed IPython": {
		"prefix": "IPython",
		"body": "import IPython; IPython.embed()"
	},
	"pytest stuff": {
		"prefix": "pytest",
		"body": [
			"import pytest",
			"",
			"def setup_function(function):",
			"    print('setup_function()')",
			"",
			"def teardown_function(function):",
			"    print('teardown_function()')",
			"",
			"@pytest.fixture()",
			"def resource_a():",
			"    return 'a value'",
			"",
			"def test_1_that_needs_resource_a(resource_a):",
			"    print('argument:', resource_a)",
			"",
			"@pytest.yield_fixture(scope='module')",
			"def cheese_db():",
			"    print('[setup] cheese_db, connect to db')",
			"    a_dictionary_for_now = {'Brie': 'No.', 'Camenbert': 'Ah! We have Camenbert, yessir.'}",
			"    yield a_dictionary_for_now",
			"    print('[teardown] cheese_db finalizer, disconnect from db')"
		]
	},
	"contexttimer": {
		"prefix": "Timer",
		"body": [
			"from contexttimer import Timer",
			"with Timer() as t:",
			"    $0",
			"print(t.elapsed)"
		]
	},
	"#!/usr/bin/env python": {
        "prefix": "env",
        "body": "#!/usr/bin/env python"
	},
    "# -*- coding=utf-8 -*-": {
        "prefix": "enc",
        "body": "# -*- coding=utf-8 -*-\n$0"
    },
    "# coding=utf-8": {
        "prefix": "enco",
        "body": "# coding=utf-8\n$0"
	},
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0"
    }
}