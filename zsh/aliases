# to make aliases work with sudo
# whitespace ---v
alias sudo='sudo '
alias doch='sudo !!'

alias g=git
alias py='python'
alias ipy='ipython'
alias ipy2='ipython2'
alias x='chmod u+x'
alias h='history'
alias utar='tar xvf'
alias dstat='dstat -cdnpmgs --top-bio --top-cpu -t 5'
alias ls='ls --color=auto'
alias ll='ls -lh'
alias la='ls -a'
alias lla='ll -a'
alias reload2='exec $SHELL -l'

alias help='run-help'
alias skype='apulse skypeforlinux'
alias ns='nvidia-smi'
alias n.='nautilus .'
alias n='nautilus'
alias pycharm='pycharm-professional'
alias s=subl

# archlinux
alias python2-default='export path=(~/python2-bin $path)'
alias system="sudo systemctl"
alias journal="journalctl -e --boot"
alias journaln="journal -u NetworkManager -f"
# https://askubuntu.com/a/858621
alias sleep-off='sudo systemctl --runtime mask sleep.target suspend.target hibernate.target hybrid-sleep.target'
alias sleep-on='sudo systemctl --runtime unmask sleep.target suspend.target hibernate.target hybrid-sleep.target'


# for the PYTHONNOUSERSITE thing see https://github.com/conda/conda/issues/448 
alias coa='export PYTHONNOUSERSITE=True; conda activate'
alias cod='export PYTHONNOUSERSITE=False; conda deactivate'

# terraloupe
alias drun='nvidia-docker run -ti --net=host --rm -v /home:/home -v /mnt:/mnt -u $(id -u):$(id -g) -w $PWD -e HOME=$HOME -e CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt -e GS_ACCESS_KEY_ID -e GS_SECRET_ACCESS_KEY -e GDAL_DISABLE_READDIR_ON_OPEN=YES -e CPL_VSIL_CURL_ALLOWED_EXTENSIONS -e MAX_TMPFILE_SIZE=1000 -e PYTHONPATH $DOCKER_IMAGE'
alias gdalinfo='gdalinfo --config GDAL_PAM_ENABLED NO' 
alias qgis3='flatpak run org.qgis.qgis'
alias tft='terra flow task'
alias tfw='terra flow workflow'

# update dotfiles
function udf()
{
    (cd ~/dotfiles && git pull) &&
    install-dotfiles "$@" &&
    reload
}

# (from beneills' bashrc)
# Find a file/folder with a pattern in name:
function ff() { find . -iname '*'"$*"'*' ; }

# Swap 2 filenames around, if they exist (from Uzi's bashrc).
function swap()
{ 
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Handy Extract Program
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

function go() {
    for file in "$@"; do
        # if we try to open a google storage url, open it in the browser
        if [[ $file = gs://* ]]; then
            file="https://console.cloud.google.com/storage/browser/${file#gs://}"
        fi
        xdg-open "$file"
    done
}
