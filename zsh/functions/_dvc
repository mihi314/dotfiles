#compdef dvc

# AUTOMATICALLY GENERATED by `shtab`


_shtab_dvc_commands() {
  local _commands=(
    "add:Track data files or directories with DVC."
    "cache:Manage cache settings."
    "check-ignore:Check whether files or directories are excluded due to \`.dvcignore\`."
    "checkout:Checkout data files from cache."
    "commit:Record changes to files or directories tracked by DVC by storing the current versions in the cache."
    "completion:Prints out shell tab completion scripts."
    "config:Get or set config options."
    "dag:Visualize DVC project DAG."
    "destroy:Remove DVC files, local DVC config and data cache."
    "diff:Show added, modified, or deleted data between commits in the DVC repository, or between a commit and the workspace."
    "doctor:Display the DVC version and system\/environment information."
    "exp:Commands to run and compare experiments."
    "experiments:Commands to run and compare experiments."
    "fetch:Download files or directories from remote storage to the cache."
    "freeze:Freeze stages or .dvc files."
    "gc:Removes all files in the cache or a remote which are not in"
    "get:Download file or directory tracked by DVC or by Git."
    "get-url:Download or copy files from URL."
    "import:Download file or directory tracked by DVC or by Git into the workspace, and track it."
    "import-url:Download or copy file from URL and take it under DVC control."
    "init:Initialize DVC in the current directory. Expects directory"
    "install:Install DVC git hooks into the repository."
    "list:List repository contents, including files and directories tracked by DVC and by Git."
    "list-url:List directory contents from URL."
    "ls:List repository contents, including files and directories tracked by DVC and by Git."
    "ls-url:List directory contents from URL."
    "metrics:Commands to display and compare metrics."
    "move:Rename or move a DVC controlled data file or a directory."
    "params:Commands to display params."
    "plots:Commands to visualize and compare plot data."
    "pull:Download tracked files or directories from remote storage."
    "push:Upload tracked files or directories to remote storage."
    "queue:Commands to manage experiments queue."
    "remote:Set up and manage data remotes."
    "remove:Remove stages from dvc.yaml and\/or stop tracking files or directories."
    "repro:Reproduce complete or partial pipelines by executing their stages."
    "root:Return the relative path to the root of the DVC project."
    "run:Generate a dvc.yaml file from a command and execute the command."
    "stage:Commands to list and create stages."
    "status:Show changed stages, compare local cache and a remote storage."
    "unfreeze:Unfreeze stages or .dvc files."
    "unprotect:Unprotect tracked files or directories (when hardlinks or symlinks have been enabled with \`dvc config cache.type\`)."
    "update:Update data artifact imported (via dvc import or dvc import-url) from an external DVC repository or URL."
    "version:Display the DVC version and system\/environment information."
  )
  _describe 'dvc commands' _commands
}

_shtab_dvc_cache_commands() {
  local _commands=(
    "dir:Manage cache settings."
  )
  _describe 'dvc cache commands' _commands
}

_shtab_dvc_exp_commands() {
  local _commands=(
    "apply:Apply the changes from an experiment to your workspace."
    "branch:Promote an experiment to a Git branch."
    "clean:Cleanup experiments temporary internal files."
    "diff:Show changes between experiments."
    "gc:Removes all experiments which are not derived from the specified Git revisions."
    "init:Quickly setup any project to use experiments."
    "list:List local and remote experiments."
    "pull:Pull an experiment from a Git remote."
    "push:Push a local experiment to a Git remote."
    "remove:Remove experiments."
    "run:Run or resume an experiment."
    "save:Save current workspace as an experiment."
    "show:Print experiments."
  )
  _describe 'dvc exp commands' _commands
}

_shtab_dvc_experiments_commands() {
  local _commands=(
    "apply:Apply the changes from an experiment to your workspace."
    "branch:Promote an experiment to a Git branch."
    "clean:Cleanup experiments temporary internal files."
    "diff:Show changes between experiments."
    "gc:Removes all experiments which are not derived from the specified Git revisions."
    "init:Quickly setup any project to use experiments."
    "list:List local and remote experiments."
    "pull:Pull an experiment from a Git remote."
    "push:Push a local experiment to a Git remote."
    "remove:Remove experiments."
    "run:Run or resume an experiment."
    "save:Save current workspace as an experiment."
    "show:Print experiments."
  )
  _describe 'dvc experiments commands' _commands
}

_shtab_dvc_metrics_commands() {
  local _commands=(
    "diff:Show changes in metrics between commits in the DVC repository, or between a commit and the workspace."
    "show:Print metrics, with optional formatting."
  )
  _describe 'dvc metrics commands' _commands
}

_shtab_dvc_params_commands() {
  local _commands=(
    "diff:Show changes in params between commits in the DVC repository, or between a commit and the workspace."
  )
  _describe 'dvc params commands' _commands
}

_shtab_dvc_plots_commands() {
  local _commands=(
    "diff:Show multiple versions of a plot by overlaying them in a single image."
    "modify:Modify display properties of data-series plots defined in stages (has no effect on image plots)."
    "show:Generate plots from target files or from \`plots\` definitions in \`dvc.yaml\`."
    "templates:List built-in plots templates or show JSON specification for one."
  )
  _describe 'dvc plots commands' _commands
}

_shtab_dvc_queue_commands() {
  local _commands=(
    "kill:Gracefully interrupt running experiment queue tasks (equivalent to Ctrl-C)"
    "logs:Show output logs for running and completed experiment queue tasks."
    "remove:Remove queued and completed tasks from the queue."
    "start:Start the experiments task queue worker."
    "status:Show the status of experiments queue tasks and workers."
    "stop:Stop all experiments task queue workers."
  )
  _describe 'dvc queue commands' _commands
}

_shtab_dvc_remote_commands() {
  local _commands=(
    "add:Add a new data remote."
    "default:Set\/unset the default data remote."
    "list:List all available data remotes."
    "modify:Modify the configuration of a data remote."
    "remove:Remove a data remote."
    "rename:Rename a DVC remote"
  )
  _describe 'dvc remote commands' _commands
}

_shtab_dvc_stage_commands() {
  local _commands=(
    "add:Create stage"
    "list:List stages."
  )
  _describe 'dvc stage commands' _commands
}

_shtab_dvc_options=(
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "(- : *)"{-h,--help}"[Show this help message and exit.]"
  "(- : *)"{-V,--version}"[Show program\'s version.]"
  "--cd[Change to directory before executing.]:cd:"
)

_shtab_dvc_add_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively add files under directory targets.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "--external[Allow targets that are outside of the DVC repository.]"
  "--glob[Allows targets containing shell-style wildcards.]"
  "--file[Specify name of the .dvc file this command will generate.]:file:"
  {-o,--out}"[Destination path to put files to.]:out:"
  "--to-remote[Download it directly to the remote]"
  {-r,--remote}"[Remote storage to download to]:remote:"
  {-j,--jobs}"[Only used along with \'--to-remote\'. Number of jobs to run simultaneously when pushing data to remote.The default value is 4 \* cpu_count(). ]:jobs:"
  {-f,--force}"[Override local file or folder if exists.]"
  "--desc[User description of the data.]:desc:"
  "*--meta[Custom metadata to add to the data.]:meta:"
  "*--label[Label for the data.]:labels:"
  "--type[Type of the data.]:type:"
  "(*):Input files\/directories to add.:_files"
)

_shtab_dvc_cache_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_cache_dir_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  {-u,--unset}"[Unset option.]"
  ":Path to cache directory. Relative paths are resolved relative to the current directory and saved to config relative to the config file location. If no path is provided, it returns the current cache directory.:_files -/"
)

_shtab_dvc_check_ignore_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-d,--details}"[Show the exclude patterns along with each target path.]"
  {-a,--all}"[Include the target paths which don\'t match any pattern in the \`--details\` list.]"
  {-n,--non-matching}"[Include the target paths which don\'t match any pattern in the \`--details\` list.]"
  "--stdin[Read paths from standard input instead of providing \`targets\`.]"
  "(*)::File or directory paths to check:_files"
)

_shtab_dvc_checkout_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--summary[Show summary of the changes.]"
  {-d,--with-deps}"[Checkout all dependencies of the specified target.]"
  {-R,--recursive}"[Checkout all subdirectories of the specified directory.]"
  {-f,--force}"[Do not prompt when removing working directory files.]"
  "--relink[Recreate links or copies from cache to workspace.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_commit_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Commit even if hash value for dependencies\/outputs changed.]"
  {-d,--with-deps}"[Commit all dependencies of the specified target.]"
  {-R,--recursive}"[Commit cache for subdirectories of the specified directory.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_stages_and_files"
)

_shtab_dvc_completion_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-s,--shell}"[Shell syntax for completions.]:shell:(bash zsh)"
)

_shtab_dvc_config_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-u,--unset}"[Unset option.]"
  {-l,--list}"[List all defined config values.]"
  "--show-origin[Show the source file containing each config value.]"
  ":Option name (section.option or remote.name.option).:"
  ":Option value.:"
)

_shtab_dvc_dag_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--dot[Print DAG with .dot format.]"
  "--mermaid[Print DAG with mermaid format.]"
  {--md,--show-md}"[Print DAG with mermaid format wrapped in Markdown block.]"
  "--full[Show full DAG that the target belongs too, instead of showing DAG consisting only of ancestors.]"
  {-o,--outs}"[Print output files instead of stages.]"
  ":Stage name or output to show pipeline for. Finds all stages in the workspace by default.:"
)

_shtab_dvc_destroy_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Force destruction.]"
)

_shtab_dvc_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--targets[Specific DVC-tracked files to compare. Accepts one or more file paths.]:targets:_files"
  {--json,--show-json}"[Format the output into a JSON]"
  "--show-hash[Display hash value for each entry]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--hide-missing[Hide missing cache file status.]"
  ":Old Git commit to compare (defaults to HEAD):"
  ":New Git commit to compare (defaults to the current workspace):"
)

_shtab_dvc_doctor_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_exp_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_exp_apply_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--no-force[Fail if this command would overwrite conflicting changes.]"
  ":Experiment to be applied.:_dvc_compadd_exps"
)

_shtab_dvc_exp_branch_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Experiment to be promoted.:"
  ":Optional name for the new Git branch. Defaults to \'\{experiment-name\}-branch\'.:"
)

_shtab_dvc_exp_clean_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_exp_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--all[Show unchanged metrics\/params as well.]"
  "--param-deps[Show only params that are stage dependencies.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--no-path[Don\'t show metric\/param path.]"
  "--precision[Round metrics\/params to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  ":Old experiment to compare (defaults to HEAD):_dvc_compadd_exps"
  ":New experiment to compare (defaults to the current workspace):_dvc_compadd_exps"
)

_shtab_dvc_exp_gc_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-w,--workspace}"[Keep experiments derived from the current workspace.]"
  {-a,--all-branches}"[Keep experiments derived from the tips of all Git branches.]"
  {-T,--all-tags}"[Keep experiments derived from all Git tags.]"
  {-A,--all-commits}"[Keep experiments derived from all Git commits.]"
  "--date[Keep experiments from the commits after (inclusive) a certain date. Date must match the extended ISO 8601 format (YYYY-MM-DD).]:commit_date:"
  "--queued[Keep queued experiments (experiments run queue will be cleared by default).]"
  {-f,--force}"[Force garbage collection - automatically agree to all prompts.]"
)

_shtab_dvc_exp_init_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--run[Run the experiment after initializing it]"
  {--interactive,-i}"[Prompt for values that are not provided]"
  {-f,--force}"[Overwrite existing stage]"
  "--explicit[Only use the path values explicitly provided]"
  {--name,-n}"[Name of the stage to create (default\: \%(default)s)]:name:"
  "--code[Path to the source file or directory which your experiments depend (default\: src)]:code:"
  "--data[Path to the data file or directory which your experiments depend (default\: data)]:data:"
  "--models[Path to the model file or directory for your experiments (default\: models)]:models:"
  "--params[Path to the parameters file for your experiments (default\: params.yaml)]:params:"
  "--metrics[Path to the metrics file for your experiments (default\: metrics.json)]:metrics:"
  "--plots[Path to the plots file or directory for your experiments (default\: plots)]:plots:"
  "--live[Path to log dvclive outputs for your experiments]:live:"
  "--type[Select type of stage to create (default\: \%(default)s)]:type:(default checkpoint)"
  "(-)*:Command to execute.:"
)

_shtab_dvc_exp_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[List all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[List experiments derived from the specified \`\<commit\>\` as baseline (HEAD by default).]:rev:"
  {-n,--num}"[List experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {--name-only,--names-only}"[Only output experiment names (without parent commits).]"
  ":Optional Git remote name or Git URL. If provided, experiments from the specified Git repository  will be listed instead of local ones.:"
)

_shtab_dvc_exp_pull_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Pull all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Pull experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Pull experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-f,--force}"[Replace local experiment if it already exists.]"
  "--no-cache[Do not pull cached outputs for this experiment from DVC remote storage.]"
  {-r,--remote}"[Name of the DVC remote to use when pulling cached outputs.]:dvc_remote:"
  {-j,--jobs}"[Number of jobs to run simultaneously when pulling from DVC remote storage.]:jobs:"
  "--run-cache[Pull run history for all stages.]"
  ":Git remote name or Git URL.:"
  "(*)::Experiments to pull.:"
)

_shtab_dvc_exp_push_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Push all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Push experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Push experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-f,--force}"[Replace experiment in the Git remote if it already exists.]"
  "--no-cache[Do not push cached outputs for this experiment to DVC remote storage.]"
  {-r,--remote}"[Name of the DVC remote to use when pushing cached outputs.]:dvc_remote:"
  {-j,--jobs}"[Number of jobs to run simultaneously when pushing to DVC remote storage.]:jobs:"
  "--run-cache[Push run history for all stages.]"
  ":Git remote name or Git URL.:"
  "(*)::Experiments to push.:_dvc_compadd_exps"
)

_shtab_dvc_exp_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Remove all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Remove experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Remove experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  "--queue[Remove all queued experiments.]"
  {-g,--git-remote}"[Name or URL of the Git remote to remove the experiment from]:git_remote:"
  "(*)::Experiments to remove.:"
)

_shtab_dvc_exp_run_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Reproduce even if dependencies were not changed.]"
  {-i,--interactive}"[Ask for confirmation before reproducing each stage.]"
  {-s,--single-item}"[Reproduce only single data item without recursive dependencies check.]"
  {-p,--pipeline}"[Reproduce the whole pipeline that the specified targets belong to.]"
  {-P,--all-pipelines}"[Reproduce all pipelines in the repo.]"
  {-R,--recursive}"[Reproduce all stages in the specified directory.]"
  {-m,--metrics}"[Show metrics after reproduction.]"
  "--downstream[Start from the specified stages when reproducing pipelines.]"
  "--force-downstream[Reproduce all descendants of a changed stage even if their direct dependencies didn\'t change.]"
  "--pull[Try automatically pulling missing cache for outputs restored from the run-cache.]"
  "--dry[Only print the commands that would be executed without actually executing.]"
  {-n,--name}"[Human-readable experiment name. If not specified, a name will be auto-generated.]:name:"
  "*"{-S,--set-param}"[Use the specified param value when reproducing pipelines.]:set_param:"
  "--queue[Stage this experiment in the run queue for future execution.]"
  "--run-all[Execute all experiments in the run queue. Implies --temp.]"
  {-j,--jobs}"[Run the specified number of experiments at a time in parallel.]:jobs:"
  "--temp[Run this experiment in a separate temporary directory instead of your workspace.]"
  "*"{-C,--copy-paths}"[List of ignored or untracked paths to copy into the temp directory. Only used if \`--temp\` or \`--queue\` is specified.]:copy_paths:"
  {-r,--rev}"[Continue the specified checkpoint experiment. Can only be used in conjunction with --queue or --temp.]:checkpoint_resume:_dvc_compadd_exps"
  "--reset[Reset existing checkpoints and restart the experiment.]"
  "(*)::Stages to reproduce. \'dvc.yaml\' by default.:_dvc_compadd_stages_and_files"
)

_shtab_dvc_exp_save_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Replace experiment if it already exists.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {-n,--name}"[Human-readable experiment name. If not specified, a name will be auto-generated.]:name:"
  "*"{-I,--include-untracked}"[List of untracked paths to include in the experiment.]:include_untracked:"
)

_shtab_dvc_exp_show_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Show all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Show experiments derived from the specified \`\<commit\>\` as baseline (HEAD by default).]:rev:"
  {-n,--num}"[Show experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-a,--all-branches}"[Show experiments derived from the tip of all Git branches.]"
  {-T,--all-tags}"[Show experiments derived from all Git tags.]"
  "--no-pager[Do not pipe output into a pager.]"
  "--only-changed[Only show metrics\/params with values varying across the selected experiments.]"
  "--drop[Remove the columns matching the specified regex pattern.]:drop:"
  "--keep[Preserve the columns matching the specified regex pattern.]:keep:"
  "--param-deps[Show only params that are stage dependencies.]"
  "--sort-by[Sort related experiments by the specified metric or param.]:sort_by:"
  "--sort-order[Sort order to use with --sort-by. Defaults to ascending (\'asc\').]:sort_order:(asc desc)"
  "--sha[Always show git commit SHAs instead of branch\/tag names.]"
  "--hide-failed[Hide failed experiments in the table.]"
  "--hide-queued[Hide queued experiments in the table.]"
  {--json,--show-json}"[Print output in JSON format instead of a human-readable table.]"
  {--csv,--show-csv}"[Print output in csv format instead of a human-readable table.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--precision[Round metrics\/params to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  {--parallel-coordinates-plot,--pcp}"[Generate a Parallel Coordinates Plot from the tabulated output.]"
  {-o,--out}"[Destination folder to save the Parallel Coordinates Plot to]:out:_files -/"
  "--open[Open the Parallel Coordinates Plot directly in the browser.]"
  {-f,--force}"[Force re-collection of experiments instead of loading from exp cache.]"
)

_shtab_dvc_experiments_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_experiments_apply_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--no-force[Fail if this command would overwrite conflicting changes.]"
  ":Experiment to be applied.:_dvc_compadd_exps"
)

_shtab_dvc_experiments_branch_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Experiment to be promoted.:"
  ":Optional name for the new Git branch. Defaults to \'\{experiment-name\}-branch\'.:"
)

_shtab_dvc_experiments_clean_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_experiments_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--all[Show unchanged metrics\/params as well.]"
  "--param-deps[Show only params that are stage dependencies.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--no-path[Don\'t show metric\/param path.]"
  "--precision[Round metrics\/params to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  ":Old experiment to compare (defaults to HEAD):_dvc_compadd_exps"
  ":New experiment to compare (defaults to the current workspace):_dvc_compadd_exps"
)

_shtab_dvc_experiments_gc_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-w,--workspace}"[Keep experiments derived from the current workspace.]"
  {-a,--all-branches}"[Keep experiments derived from the tips of all Git branches.]"
  {-T,--all-tags}"[Keep experiments derived from all Git tags.]"
  {-A,--all-commits}"[Keep experiments derived from all Git commits.]"
  "--date[Keep experiments from the commits after (inclusive) a certain date. Date must match the extended ISO 8601 format (YYYY-MM-DD).]:commit_date:"
  "--queued[Keep queued experiments (experiments run queue will be cleared by default).]"
  {-f,--force}"[Force garbage collection - automatically agree to all prompts.]"
)

_shtab_dvc_experiments_init_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--run[Run the experiment after initializing it]"
  {--interactive,-i}"[Prompt for values that are not provided]"
  {-f,--force}"[Overwrite existing stage]"
  "--explicit[Only use the path values explicitly provided]"
  {--name,-n}"[Name of the stage to create (default\: \%(default)s)]:name:"
  "--code[Path to the source file or directory which your experiments depend (default\: src)]:code:"
  "--data[Path to the data file or directory which your experiments depend (default\: data)]:data:"
  "--models[Path to the model file or directory for your experiments (default\: models)]:models:"
  "--params[Path to the parameters file for your experiments (default\: params.yaml)]:params:"
  "--metrics[Path to the metrics file for your experiments (default\: metrics.json)]:metrics:"
  "--plots[Path to the plots file or directory for your experiments (default\: plots)]:plots:"
  "--live[Path to log dvclive outputs for your experiments]:live:"
  "--type[Select type of stage to create (default\: \%(default)s)]:type:(default checkpoint)"
  "(-)*:Command to execute.:"
)

_shtab_dvc_experiments_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[List all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[List experiments derived from the specified \`\<commit\>\` as baseline (HEAD by default).]:rev:"
  {-n,--num}"[List experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {--name-only,--names-only}"[Only output experiment names (without parent commits).]"
  ":Optional Git remote name or Git URL. If provided, experiments from the specified Git repository  will be listed instead of local ones.:"
)

_shtab_dvc_experiments_pull_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Pull all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Pull experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Pull experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-f,--force}"[Replace local experiment if it already exists.]"
  "--no-cache[Do not pull cached outputs for this experiment from DVC remote storage.]"
  {-r,--remote}"[Name of the DVC remote to use when pulling cached outputs.]:dvc_remote:"
  {-j,--jobs}"[Number of jobs to run simultaneously when pulling from DVC remote storage.]:jobs:"
  "--run-cache[Pull run history for all stages.]"
  ":Git remote name or Git URL.:"
  "(*)::Experiments to pull.:"
)

_shtab_dvc_experiments_push_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Push all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Push experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Push experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-f,--force}"[Replace experiment in the Git remote if it already exists.]"
  "--no-cache[Do not push cached outputs for this experiment to DVC remote storage.]"
  {-r,--remote}"[Name of the DVC remote to use when pushing cached outputs.]:dvc_remote:"
  {-j,--jobs}"[Number of jobs to run simultaneously when pushing to DVC remote storage.]:jobs:"
  "--run-cache[Push run history for all stages.]"
  ":Git remote name or Git URL.:"
  "(*)::Experiments to push.:_dvc_compadd_exps"
)

_shtab_dvc_experiments_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Remove all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Remove experiments derived from the specified \`\<commit\>\` as baseline.]:rev:"
  {-n,--num}"[Remove experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  "--queue[Remove all queued experiments.]"
  {-g,--git-remote}"[Name or URL of the Git remote to remove the experiment from]:git_remote:"
  "(*)::Experiments to remove.:"
)

_shtab_dvc_experiments_run_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Reproduce even if dependencies were not changed.]"
  {-i,--interactive}"[Ask for confirmation before reproducing each stage.]"
  {-s,--single-item}"[Reproduce only single data item without recursive dependencies check.]"
  {-p,--pipeline}"[Reproduce the whole pipeline that the specified targets belong to.]"
  {-P,--all-pipelines}"[Reproduce all pipelines in the repo.]"
  {-R,--recursive}"[Reproduce all stages in the specified directory.]"
  {-m,--metrics}"[Show metrics after reproduction.]"
  "--downstream[Start from the specified stages when reproducing pipelines.]"
  "--force-downstream[Reproduce all descendants of a changed stage even if their direct dependencies didn\'t change.]"
  "--pull[Try automatically pulling missing cache for outputs restored from the run-cache.]"
  "--dry[Only print the commands that would be executed without actually executing.]"
  {-n,--name}"[Human-readable experiment name. If not specified, a name will be auto-generated.]:name:"
  "*"{-S,--set-param}"[Use the specified param value when reproducing pipelines.]:set_param:"
  "--queue[Stage this experiment in the run queue for future execution.]"
  "--run-all[Execute all experiments in the run queue. Implies --temp.]"
  {-j,--jobs}"[Run the specified number of experiments at a time in parallel.]:jobs:"
  "--temp[Run this experiment in a separate temporary directory instead of your workspace.]"
  "*"{-C,--copy-paths}"[List of ignored or untracked paths to copy into the temp directory. Only used if \`--temp\` or \`--queue\` is specified.]:copy_paths:"
  {-r,--rev}"[Continue the specified checkpoint experiment. Can only be used in conjunction with --queue or --temp.]:checkpoint_resume:_dvc_compadd_exps"
  "--reset[Reset existing checkpoints and restart the experiment.]"
  "(*)::Stages to reproduce. \'dvc.yaml\' by default.:_dvc_compadd_stages_and_files"
)

_shtab_dvc_experiments_save_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Replace experiment if it already exists.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {-n,--name}"[Human-readable experiment name. If not specified, a name will be auto-generated.]:name:"
  "*"{-I,--include-untracked}"[List of untracked paths to include in the experiment.]:include_untracked:"
)

_shtab_dvc_experiments_show_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-A,--all-commits}"[Show all experiments in the repository (overrides \`--rev\` and \`--num\`).]"
  "--rev[Show experiments derived from the specified \`\<commit\>\` as baseline (HEAD by default).]:rev:"
  {-n,--num}"[Show experiments from the last \`num\` commits (first parents) starting from the \`--rev\` baseline. Give a negative value to include all first-parent commits (similar to \`git log -n\`).]:num:"
  {-a,--all-branches}"[Show experiments derived from the tip of all Git branches.]"
  {-T,--all-tags}"[Show experiments derived from all Git tags.]"
  "--no-pager[Do not pipe output into a pager.]"
  "--only-changed[Only show metrics\/params with values varying across the selected experiments.]"
  "--drop[Remove the columns matching the specified regex pattern.]:drop:"
  "--keep[Preserve the columns matching the specified regex pattern.]:keep:"
  "--param-deps[Show only params that are stage dependencies.]"
  "--sort-by[Sort related experiments by the specified metric or param.]:sort_by:"
  "--sort-order[Sort order to use with --sort-by. Defaults to ascending (\'asc\').]:sort_order:(asc desc)"
  "--sha[Always show git commit SHAs instead of branch\/tag names.]"
  "--hide-failed[Hide failed experiments in the table.]"
  "--hide-queued[Hide queued experiments in the table.]"
  {--json,--show-json}"[Print output in JSON format instead of a human-readable table.]"
  {--csv,--show-csv}"[Print output in csv format instead of a human-readable table.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--precision[Round metrics\/params to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  {--parallel-coordinates-plot,--pcp}"[Generate a Parallel Coordinates Plot from the tabulated output.]"
  {-o,--out}"[Destination folder to save the Parallel Coordinates Plot to]:out:_files -/"
  "--open[Open the Parallel Coordinates Plot directly in the browser.]"
  {-f,--force}"[Force re-collection of experiments instead of loading from exp cache.]"
)

_shtab_dvc_fetch_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-r,--remote}"[Remote storage to fetch from]:remote:"
  {-a,--all-branches}"[Fetch cache for all branches.]"
  {-T,--all-tags}"[Fetch cache for all tags.]"
  {-A,--all-commits}"[Fetch cache for all commits.]"
  {-d,--with-deps}"[Fetch cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Fetch cache for subdirectories of specified directory.]"
  "--run-cache[Fetch run history for all stages.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_freeze_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "(*):Stages or .dvc files to freeze:_dvc_compadd_DVCFiles"
)

_shtab_dvc_gc_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-w,--workspace}"[Keep data files used in the current workspace.]"
  "--rev[Keep data files used in the specified \<commit\>.]:rev:"
  {-n,--num}"[Keep data files used in the last \`num\` commits starting from the \`--rev\` \<commit\>. Only used if \`--rev\` is also provided. Defaults to \`1\`.]:num:"
  {-a,--all-branches}"[Keep data files for the tips of all Git branches.]"
  {-T,--all-tags}"[Keep data files for all Git tags.]"
  {-A,--all-commits}"[Keep data files for all Git commits.]"
  "--date[Keep cached data referenced in the commits after ( inclusive ) a certain time. Date must match the extended ISO 8601 format (YYYY-MM-DD).]:commit_date:"
  "--all-experiments[Keep data files for all experiments.]"
  "--not-in-remote[Keep data files that are not present in the remote.]"
  {-c,--cloud}"[Collect garbage in remote repository.]"
  {-r,--remote}"[Remote storage to collect garbage in]:remote:"
  {-f,--force}"[Force garbage collection - automatically agree to all prompts.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-p,--projects}"[Keep data files required by these projects in addition to the current one. Useful if you share a single cache across repos.]:repos:"
)

_shtab_dvc_get_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-o,--out}"[Destination path to download files to]:out:_files -/"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  "--show-url[Print the storage location (URL) the target data would be downloaded from, and exit.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-f,--force}"[Override local file or folder if exists.]"
  ":Location of DVC or Git repository to download from:"
  ":Path to a file or directory within the repository:_files"
)

_shtab_dvc_get_url_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-f,--force}"[Override local file or folder if exists.]"
  ":See \`dvc import-url -h\` for full list of supported URLs.:"
  ":Destination path to put data to.:_files -/"
)

_shtab_dvc_import_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-o,--out}"[Destination path to download files to]:out:_files -/"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  "--file[Specify name of the .dvc file this command will generate.]:file:"
  "--no-exec[Only create .dvc file without actually importing target data.]"
  "--no-download[Create .dvc file including target data hash value(s) but do not actually download the file(s).]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  "--desc[User description of the data.]:desc:"
  "*--meta[Custom metadata to add to the data.]:meta:"
  "*--label[Label for the data.]:labels:"
  "--type[Type of the data.]:type:"
  ":Location of DVC or Git repository to download from:"
  ":Path to a file or directory within the repository:_files"
)

_shtab_dvc_import_url_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--file[Specify name of the .dvc file this command will generate.]:file:_files -/"
  "--to-remote[Download it directly to the remote]"
  {-r,--remote}"[Remote storage to download to]:remote:"
  "--no-exec[Only create .dvc file without actually importing target data.]"
  "--no-download[Create .dvc file including target data hash value(s) but do not actually download the file(s).]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-f,--force}"[Override local file or folder if exists.]"
  "--version-aware[Import using cloud versioning. Implied if the URL contains a version ID.]"
  "--desc[User description of the data.]:desc:"
  "*--meta[Custom metadata to add to the data.]:meta:"
  "*--label[Label for the data.]:labels:"
  "--type[Type of the data.]:type:"
  ":Location of the data to download. Supported URLs\::"
  ":Destination path to put files to.:_files -/"
)

_shtab_dvc_init_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--no-scm[Initiate DVC in directory that is not tracked by any SCM tool (e.g. Git).]"
  {-f,--force}"[Overwrite existing \'.dvc\/\' directory. This operation removes local cache.]"
  "--subdir[Necessary for running this command inside a subdirectory of a parent SCM repository.]"
)

_shtab_dvc_install_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--use-pre-commit-tool[Install DVC hooks using pre-commit (https\:\/\/pre-commit.com) if it is installed.]"
)

_shtab_dvc_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively list files.]"
  "--dvc-only[Show only DVC outputs.]"
  {--json,--show-json}"[Show output in JSON format.]"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  ":Location of DVC repository to list:"
  ":Path to directory within the repository to list outputs for:_files -/"
)

_shtab_dvc_list_url_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively list files.]"
  ":See \`dvc import-url -h\` for full list of supported URLs.:"
)

_shtab_dvc_ls_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively list files.]"
  "--dvc-only[Show only DVC outputs.]"
  {--json,--show-json}"[Show output in JSON format.]"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  ":Location of DVC repository to list:"
  ":Path to directory within the repository to list outputs for:_files -/"
)

_shtab_dvc_ls_url_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively list files.]"
  ":See \`dvc import-url -h\` for full list of supported URLs.:"
)

_shtab_dvc_metrics_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_metrics_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--targets[Specific metrics file(s) to compare (even if not found as \`metrics\` in \`dvc.yaml\`). Using -R, directories to search metrics files in can also be given.Shows all tracked metrics by default.]:targets:_files"
  {-R,--recursive}"[If any target is a directory, recursively search and process metrics files.]"
  "--all[Show unchanged metrics as well.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--no-path[Don\'t show metric path.]"
  "--precision[Round metrics to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  ":Old Git commit to compare (defaults to HEAD):"
  ":New Git commit to compare (defaults to the current workspace):"
)

_shtab_dvc_metrics_show_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-a,--all-branches}"[Show metrics for all branches.]"
  {-T,--all-tags}"[Show metrics for all tags.]"
  {-A,--all-commits}"[Show metrics for all commits.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  {-R,--recursive}"[If any target is a directory, recursively search and process metrics files.]"
  "--precision[Round metrics to \`n\` digits precision after the decimal point. Rounds to 5 digits by default.]:precision:"
  "(*)::Limit command scope to these metrics files. Using -R, directories to search metrics files in can also be given.:_files"
)

_shtab_dvc_move_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Source path to a data file or directory.:_files"
  ":Destination path.:_files"
)

_shtab_dvc_params_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_params_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--targets[Specific params file(s) to compare (even if not found as \`params\` in \`dvc.yaml\`). Shows all tracked params by default.]:targets:_files"
  "--all[Show unchanged params as well.]"
  "--deps[Show only params that are stage dependencies.]"
  {--json,--show-json}"[Show output in JSON format.]"
  {--md,--show-md}"[Show tabulated output in the Markdown format (GFM).]"
  "--no-path[Don\'t show params path.]"
  ":Old Git commit to compare (defaults to HEAD):"
  ":New Git commit to compare (defaults to the current workspace):"
)

_shtab_dvc_plots_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_plots_diff_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--targets[Specific plots to visualize. Accepts any file path or plot name from \`dvc.yaml\` file. Shows all tracked plots by default.]:targets:_files"
  {-t,--template}"[Special JSON or HTML schema file to inject with the data. See \<\\[36mhttps\:\/\/man.dvc.org\/plots\#plot-templates\\[39m\>]:template:_files"
  "-x[Field name for X axis.]:x:"
  "-y[Field name for Y axis.]:y:"
  "--no-header[Provided CSV or TSV datafile does not have a header.]"
  "--title[Plot title.]:title:"
  "--x-label[X axis label]:x_label:"
  "--y-label[Y axis label]:y_label:"
  {-o,--out}"[Directory to save plots to.]:out:_files -/"
  "--show-vega[Show output in Vega format.]"
  "--open[Open plot file directly in the browser.]"
  "--html-template[Custom HTML template for VEGA visualization.]:html_template:"
  "(*)::Git commits to plot from:"
)

_shtab_dvc_plots_modify_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-t,--template}"[Special JSON or HTML schema file to inject with the data. See \<\\[36mhttps\:\/\/man.dvc.org\/plots\#plot-templates\\[39m\>]:template:_files"
  "-x[Field name for X axis.]:x:"
  "-y[Field name for Y axis.]:y:"
  "--no-header[Provided CSV or TSV datafile does not have a header.]"
  "--title[Plot title.]:title:"
  "--x-label[X axis label]:x_label:"
  "--y-label[Y axis label]:y_label:"
  "--unset[Unset one or more display properties.]:unset:"
  ":Plots file to set properties for (defined at the stage level).:_files"
)

_shtab_dvc_plots_show_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-t,--template}"[Special JSON or HTML schema file to inject with the data. See \<\\[36mhttps\:\/\/man.dvc.org\/plots\#plot-templates\\[39m\>]:template:_files"
  "-x[Field name for X axis.]:x:"
  "-y[Field name for Y axis.]:y:"
  "--no-header[Provided CSV or TSV datafile does not have a header.]"
  "--title[Plot title.]:title:"
  "--x-label[X axis label]:x_label:"
  "--y-label[Y axis label]:y_label:"
  {-o,--out}"[Directory to save plots to.]:out:_files -/"
  "--show-vega[Show output in Vega format.]"
  "--open[Open plot file directly in the browser.]"
  "--html-template[Custom HTML template for VEGA visualization.]:html_template:"
  "(*)::Plots files or plot IDs from \`dvc.yaml\` to visualize. Shows all plots by default.:_files"
)

_shtab_dvc_plots_templates_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Template for which to show JSON specification. List all template names by default.:"
)

_shtab_dvc_pull_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-r,--remote}"[Remote storage to pull from]:remote:"
  {-a,--all-branches}"[Fetch cache for all branches.]"
  {-T,--all-tags}"[Fetch cache for all tags.]"
  {-A,--all-commits}"[Fetch cache for all commits.]"
  {-f,--force}"[Do not prompt when removing working directory files.]"
  {-d,--with-deps}"[Fetch cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Pull cache for subdirectories of the specified directory.]"
  "--run-cache[Fetch run history for all stages.]"
  "--allow-missing[Ignore errors if some of the files or directories are missing.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_push_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-r,--remote}"[Remote storage to push to]:remote:"
  {-a,--all-branches}"[Push cache for all branches.]"
  {-T,--all-tags}"[Push cache for all tags.]"
  {-A,--all-commits}"[Push cache for all commits.]"
  {-d,--with-deps}"[Push cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Push cache for subdirectories of specified directory.]"
  "--run-cache[Push run history for all stages.]"
  "--glob[Allows targets containing shell-style wildcards.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_queue_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_queue_kill_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Forcefully and immediately kill running experiment queue tasks]"
  "(*)::Tasks in queue to kill.:"
)

_shtab_dvc_queue_logs_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-e,--encoding}"[Text encoding for log output. Defaults to system locale encoding.]:encoding:"
  {-f,--follow}"[Attach to task and follow additional live output. Only applicable if the task is still running.]"
  ":Task to show.:"
)

_shtab_dvc_queue_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--all[Remove all queued and completed tasks from the queue.]"
  "--queued[Remove all queued tasks from the queue.]"
  "--success[Remove all successful tasks from the queue.]"
  "--failed[Remove all failed tasks from the queue.]"
  "(*)::Tasks to remove.:"
)

_shtab_dvc_queue_start_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Maximum number of concurrent queue workers to start. Defaults to 1.]:jobs:"
)

_shtab_dvc_queue_status_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_queue_stop_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--kill[Kill all running tasks before stopping the queue workers.]"
)

_shtab_dvc_remote_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_remote_add_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-d,--default}"[Set as default remote.]"
  {-f,--force}"[Force overwriting existing configs]"
  ":Name of the remote:"
  ":Remote location. See full list of supported URLs at \<\\[36mhttps\:\/\/man.dvc.org\/remote\\[39m\>:"
)

_shtab_dvc_remote_default_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-u,--unset}"[Unset default remote.]"
  ":Name of the remote:"
)

_shtab_dvc_remote_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_remote_modify_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-u,--unset}"[Unset option.]"
  ":Name of the remote:"
  ":Name of the option to modify.:"
  ":(optional) Value of the option.:"
)

_shtab_dvc_remote_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Name of the remote to remove.:"
)

_shtab_dvc_remote_rename_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--project[Use project config (.dvc\/config).]"
  "--local[Use local config (.dvc\/config.local).]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Remote to be renamed:"
  ":New name of the remote:"
)

_shtab_dvc_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--outs[Remove outputs as well.]"
  "(*):.dvc files or stages from dvc.yaml to remove.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_repro_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Reproduce even if dependencies were not changed.]"
  {-i,--interactive}"[Ask for confirmation before reproducing each stage.]"
  {-s,--single-item}"[Reproduce only single data item without recursive dependencies check.]"
  {-p,--pipeline}"[Reproduce the whole pipeline that the specified targets belong to.]"
  {-P,--all-pipelines}"[Reproduce all pipelines in the repo.]"
  {-R,--recursive}"[Reproduce all stages in the specified directory.]"
  {-m,--metrics}"[Show metrics after reproduction.]"
  "--downstream[Start from the specified stages when reproducing pipelines.]"
  "--force-downstream[Reproduce all descendants of a changed stage even if their direct dependencies didn\'t change.]"
  "--pull[Try automatically pulling missing cache for outputs restored from the run-cache.]"
  "--dry[Only print the commands that would be executed without actually executing.]"
  "--glob[Allows targets containing shell-style wildcards.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "--no-run-cache[Execute stage commands even if they have already been run with the same command\/dependencies\/outputs\/etc before.]"
  "(*)::Stages to reproduce. \'dvc.yaml\' by default.:_dvc_compadd_stages_and_files"
)

_shtab_dvc_root_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_run_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-n,--name}"[Stage name.]:name:"
  {-f,--force}"[Overwrite existing stage]"
  "*"{-d,--deps}"[Declare dependencies for reproducible cmd.]:deps:_files"
  "*"{-p,--params}"[Declare parameter to use as additional dependency.]:params:_files"
  "*"{-o,--outs}"[Declare output file or directory.]:outs:_files"
  "*"{-O,--outs-no-cache}"[Declare output file or directory (do not put into DVC cache).]:outs_no_cache:_files"
  "*"{-c,--checkpoints}"[Declare checkpoint output file or directory for \'dvc exp run\'. Not compatible with \'dvc repro\'.]:checkpoints:_files"
  "--external[Allow outputs that are outside of the DVC repository.]"
  "*--outs-persist[Declare output file or directory that will not be removed upon repro.]:outs_persist:"
  "*--outs-persist-no-cache[Declare output file or directory that will not be removed upon repro (do not put into DVC cache).]:outs_persist_no_cache:"
  "*"{-m,--metrics}"[Declare output metrics file.]:metrics:"
  "*"{-M,--metrics-no-cache}"[Declare output metrics file (do not put into DVC cache).]:metrics_no_cache:"
  "*--plots[Declare output plot file.]:plots:"
  "*--plots-no-cache[Declare output plot file (do not put into DVC cache).]:plots_no_cache:"
  {-w,--wdir}"[Directory within your repo to run your command in.]:wdir:"
  "--always-changed[Always consider this DVC-file as changed.]"
  "--desc[User description of the stage (optional). This doesn\'t affect any DVC operations.]:desc:"
  "--no-exec[Only create dvc.yaml without actually running it.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "--no-run-cache[Execute the command even if this stage has already been run with the same command\/dependencies\/outputs\/etc before.]"
  "(-)*:Command to execute.:"
)

_shtab_dvc_stage_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_stage_add_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-n,--name}"[Name of the stage to add]:name:"
  {-f,--force}"[Overwrite existing stage]"
  "*"{-d,--deps}"[Declare dependencies for reproducible cmd.]:deps:_files"
  "*"{-p,--params}"[Declare parameter to use as additional dependency.]:params:_files"
  "*"{-o,--outs}"[Declare output file or directory.]:outs:_files"
  "*"{-O,--outs-no-cache}"[Declare output file or directory (do not put into DVC cache).]:outs_no_cache:_files"
  "*"{-c,--checkpoints}"[Declare checkpoint output file or directory for \'dvc exp run\'. Not compatible with \'dvc repro\'.]:checkpoints:_files"
  "--external[Allow outputs that are outside of the DVC repository.]"
  "*--outs-persist[Declare output file or directory that will not be removed upon repro.]:outs_persist:"
  "*--outs-persist-no-cache[Declare output file or directory that will not be removed upon repro (do not put into DVC cache).]:outs_persist_no_cache:"
  "*"{-m,--metrics}"[Declare output metrics file.]:metrics:"
  "*"{-M,--metrics-no-cache}"[Declare output metrics file (do not put into DVC cache).]:metrics_no_cache:"
  "*--plots[Declare output plot file.]:plots:"
  "*--plots-no-cache[Declare output plot file (do not put into DVC cache).]:plots_no_cache:"
  {-w,--wdir}"[Directory within your repo to run your command in.]:wdir:"
  "--always-changed[Always consider this DVC-file as changed.]"
  "--desc[User description of the stage (optional). This doesn\'t affect any DVC operations.]:desc:"
  "(-)*:Command to execute.:"
)

_shtab_dvc_stage_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--all[List all of the stages in the repo.]"
  "--fail[Fail immediately, do not suppress any syntax errors.]"
  {-R,--recursive}"[List all stages inside the specified directory.]"
  {--name-only,--names-only}"[List only stage names.]"
  "(*)::Show stages from a dvc.yaml\/.dvc file or a directory. \'dvc.yaml\' by default:"
)

_shtab_dvc_status_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  {-q,--quiet}"[Suppresses all output. Exit with 0 if pipelines are up to date, otherwise 1.]"
  {-c,--cloud}"[Show status of a local cache compared to a remote repository.]"
  {-r,--remote}"[Remote storage to compare local cache to]:remote:"
  {-a,--all-branches}"[Show status of a local cache compared to a remote repository for all branches.]"
  {-T,--all-tags}"[Show status of a local cache compared to a remote repository for all tags.]"
  {-A,--all-commits}"[Show status of a local cache compared to a remote repository for all commits.]"
  {-d,--with-deps}"[Show status for all dependencies of the specified target.]"
  {-R,--recursive}"[Show status of all stages in the specified directory.]"
  {--json,--show-json}"[Show status in JSON format.]"
  "(*)::Limit command scope to these tracked files\/directories, .dvc files and stage names.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_unfreeze_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "(*):Stages or .dvc files to unfreeze:_dvc_compadd_DVCFiles"
)

_shtab_dvc_unprotect_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "(*):Data files\/directories to unprotect.:_files"
)

_shtab_dvc_update_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  {-R,--recursive}"[Update all stages in the specified directory.]"
  "--no-download[Update .dvc file git revision\/hash value(s) but do not download the file(s).]"
  "--to-remote[Update data directly on the remote]"
  {-r,--remote}"[Remote storage to perform updates to]:remote:"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). ]:jobs:"
  "(*):.dvc files to update.:_dvc_compadd_DVCFiles"
)

_shtab_dvc_version_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)


_shtab_dvc() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_options+=(': :_shtab_dvc_commands' '*::: :->dvc')
  fi
  _arguments -C $_shtab_dvc_options

  case $state in
    dvc)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc-$line[1]:"
      case $line[1] in
        add) _arguments -C $_shtab_dvc_add_options ;;
        cache) _shtab_dvc_cache ;;
        check-ignore) _arguments -C $_shtab_dvc_check_ignore_options ;;
        checkout) _arguments -C $_shtab_dvc_checkout_options ;;
        commit) _arguments -C $_shtab_dvc_commit_options ;;
        completion) _arguments -C $_shtab_dvc_completion_options ;;
        config) _arguments -C $_shtab_dvc_config_options ;;
        dag) _arguments -C $_shtab_dvc_dag_options ;;
        destroy) _arguments -C $_shtab_dvc_destroy_options ;;
        diff) _arguments -C $_shtab_dvc_diff_options ;;
        doctor) _arguments -C $_shtab_dvc_doctor_options ;;
        exp) _shtab_dvc_exp ;;
        experiments) _shtab_dvc_experiments ;;
        fetch) _arguments -C $_shtab_dvc_fetch_options ;;
        freeze) _arguments -C $_shtab_dvc_freeze_options ;;
        gc) _arguments -C $_shtab_dvc_gc_options ;;
        get) _arguments -C $_shtab_dvc_get_options ;;
        get-url) _arguments -C $_shtab_dvc_get_url_options ;;
        import) _arguments -C $_shtab_dvc_import_options ;;
        import-url) _arguments -C $_shtab_dvc_import_url_options ;;
        init) _arguments -C $_shtab_dvc_init_options ;;
        install) _arguments -C $_shtab_dvc_install_options ;;
        list) _arguments -C $_shtab_dvc_list_options ;;
        list-url) _arguments -C $_shtab_dvc_list_url_options ;;
        ls) _arguments -C $_shtab_dvc_ls_options ;;
        ls-url) _arguments -C $_shtab_dvc_ls_url_options ;;
        metrics) _shtab_dvc_metrics ;;
        move) _arguments -C $_shtab_dvc_move_options ;;
        params) _shtab_dvc_params ;;
        plots) _shtab_dvc_plots ;;
        pull) _arguments -C $_shtab_dvc_pull_options ;;
        push) _arguments -C $_shtab_dvc_push_options ;;
        queue) _shtab_dvc_queue ;;
        remote) _shtab_dvc_remote ;;
        remove) _arguments -C $_shtab_dvc_remove_options ;;
        repro) _arguments -C $_shtab_dvc_repro_options ;;
        root) _arguments -C $_shtab_dvc_root_options ;;
        run) _arguments -C $_shtab_dvc_run_options ;;
        stage) _shtab_dvc_stage ;;
        status) _arguments -C $_shtab_dvc_status_options ;;
        unfreeze) _arguments -C $_shtab_dvc_unfreeze_options ;;
        unprotect) _arguments -C $_shtab_dvc_unprotect_options ;;
        update) _arguments -C $_shtab_dvc_update_options ;;
        version) _arguments -C $_shtab_dvc_version_options ;;
      esac
  esac
}

_shtab_dvc_cache() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_cache_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_cache_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_cache_options+=(': :_shtab_dvc_cache_commands' '*::: :->cache')
  fi
  _arguments -C $_shtab_dvc_cache_options

  case $state in
    cache)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_cache-$line[1]:"
      case $line[1] in
        dir) _arguments -C $_shtab_dvc_cache_dir_options ;;
      esac
  esac
}

_shtab_dvc_exp() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_exp_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_exp_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_exp_options+=(': :_shtab_dvc_exp_commands' '*::: :->exp')
  fi
  _arguments -C $_shtab_dvc_exp_options

  case $state in
    exp)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_exp-$line[1]:"
      case $line[1] in
        apply) _arguments -C $_shtab_dvc_exp_apply_options ;;
        branch) _arguments -C $_shtab_dvc_exp_branch_options ;;
        clean) _arguments -C $_shtab_dvc_exp_clean_options ;;
        diff) _arguments -C $_shtab_dvc_exp_diff_options ;;
        gc) _arguments -C $_shtab_dvc_exp_gc_options ;;
        init) _arguments -C $_shtab_dvc_exp_init_options ;;
        list) _arguments -C $_shtab_dvc_exp_list_options ;;
        pull) _arguments -C $_shtab_dvc_exp_pull_options ;;
        push) _arguments -C $_shtab_dvc_exp_push_options ;;
        remove) _arguments -C $_shtab_dvc_exp_remove_options ;;
        run) _arguments -C $_shtab_dvc_exp_run_options ;;
        save) _arguments -C $_shtab_dvc_exp_save_options ;;
        show) _arguments -C $_shtab_dvc_exp_show_options ;;
      esac
  esac
}

_shtab_dvc_experiments() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_experiments_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_experiments_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_experiments_options+=(': :_shtab_dvc_experiments_commands' '*::: :->experiments')
  fi
  _arguments -C $_shtab_dvc_experiments_options

  case $state in
    experiments)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_experiments-$line[1]:"
      case $line[1] in
        apply) _arguments -C $_shtab_dvc_experiments_apply_options ;;
        branch) _arguments -C $_shtab_dvc_experiments_branch_options ;;
        clean) _arguments -C $_shtab_dvc_experiments_clean_options ;;
        diff) _arguments -C $_shtab_dvc_experiments_diff_options ;;
        gc) _arguments -C $_shtab_dvc_experiments_gc_options ;;
        init) _arguments -C $_shtab_dvc_experiments_init_options ;;
        list) _arguments -C $_shtab_dvc_experiments_list_options ;;
        pull) _arguments -C $_shtab_dvc_experiments_pull_options ;;
        push) _arguments -C $_shtab_dvc_experiments_push_options ;;
        remove) _arguments -C $_shtab_dvc_experiments_remove_options ;;
        run) _arguments -C $_shtab_dvc_experiments_run_options ;;
        save) _arguments -C $_shtab_dvc_experiments_save_options ;;
        show) _arguments -C $_shtab_dvc_experiments_show_options ;;
      esac
  esac
}

_shtab_dvc_metrics() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_metrics_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_metrics_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_metrics_options+=(': :_shtab_dvc_metrics_commands' '*::: :->metrics')
  fi
  _arguments -C $_shtab_dvc_metrics_options

  case $state in
    metrics)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_metrics-$line[1]:"
      case $line[1] in
        diff) _arguments -C $_shtab_dvc_metrics_diff_options ;;
        show) _arguments -C $_shtab_dvc_metrics_show_options ;;
      esac
  esac
}

_shtab_dvc_params() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_params_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_params_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_params_options+=(': :_shtab_dvc_params_commands' '*::: :->params')
  fi
  _arguments -C $_shtab_dvc_params_options

  case $state in
    params)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_params-$line[1]:"
      case $line[1] in
        diff) _arguments -C $_shtab_dvc_params_diff_options ;;
      esac
  esac
}

_shtab_dvc_plots() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_plots_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_plots_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_plots_options+=(': :_shtab_dvc_plots_commands' '*::: :->plots')
  fi
  _arguments -C $_shtab_dvc_plots_options

  case $state in
    plots)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_plots-$line[1]:"
      case $line[1] in
        diff) _arguments -C $_shtab_dvc_plots_diff_options ;;
        modify) _arguments -C $_shtab_dvc_plots_modify_options ;;
        show) _arguments -C $_shtab_dvc_plots_show_options ;;
        templates) _arguments -C $_shtab_dvc_plots_templates_options ;;
      esac
  esac
}

_shtab_dvc_queue() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_queue_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_queue_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_queue_options+=(': :_shtab_dvc_queue_commands' '*::: :->queue')
  fi
  _arguments -C $_shtab_dvc_queue_options

  case $state in
    queue)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_queue-$line[1]:"
      case $line[1] in
        kill) _arguments -C $_shtab_dvc_queue_kill_options ;;
        logs) _arguments -C $_shtab_dvc_queue_logs_options ;;
        remove) _arguments -C $_shtab_dvc_queue_remove_options ;;
        start) _arguments -C $_shtab_dvc_queue_start_options ;;
        status) _arguments -C $_shtab_dvc_queue_status_options ;;
        stop) _arguments -C $_shtab_dvc_queue_stop_options ;;
      esac
  esac
}

_shtab_dvc_remote() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_remote_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_remote_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_remote_options+=(': :_shtab_dvc_remote_commands' '*::: :->remote')
  fi
  _arguments -C $_shtab_dvc_remote_options

  case $state in
    remote)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_remote-$line[1]:"
      case $line[1] in
        add) _arguments -C $_shtab_dvc_remote_add_options ;;
        default) _arguments -C $_shtab_dvc_remote_default_options ;;
        list) _arguments -C $_shtab_dvc_remote_list_options ;;
        modify) _arguments -C $_shtab_dvc_remote_modify_options ;;
        remove) _arguments -C $_shtab_dvc_remote_remove_options ;;
        rename) _arguments -C $_shtab_dvc_remote_rename_options ;;
      esac
  esac
}

_shtab_dvc_stage() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_dvc_stage_options[(I)${(q)one_or_more}*]} + ${_shtab_dvc_stage_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_dvc_stage_options+=(': :_shtab_dvc_stage_commands' '*::: :->stage')
  fi
  _arguments -C $_shtab_dvc_stage_options

  case $state in
    stage)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_dvc_stage-$line[1]:"
      case $line[1] in
        add) _arguments -C $_shtab_dvc_stage_add_options ;;
        list) _arguments -C $_shtab_dvc_stage_list_options ;;
      esac
  esac
}

# Custom Preamble

_dvc_compadd_DVCFiles() {
    _files -g '(*?.dvc|Dvcfile|dvc.yaml)'
}
_dvc_compadd_stages() {
    # this will also show up the description of the stages
    _describe 'stages' "($(_dvc_stages_output))"
}

_dvc_stages_output() {
  dvc stage list -q | awk '{
    # escape possible `:` on the stage name
    sub(/:/, "\\\\:", $1);
    # read all of the columns except the first
    # reading `out` from $2, so as not to have a leading whitespace
    out=$2; for(i=3;i<=NF;i++){out=out" "$i};
    # print key, ":" and then single-quote the description
    # colon is a delimiter used by `_describe` to separate field/description
    print $1":""\047"out"\047"
    # single quote -> \047
    }'
}

_dvc_compadd_stages_and_files() {
    _dvc_compadd_DVCFiles
    _dvc_compadd_stages
}

_dvc_compadd_exps() {
    _describe 'experiments' "($(dvc exp list -q --all-commits --names-only))"
}

# End Custom Preamble


typeset -A opt_args
_shtab_dvc "$@"
