#!/usr/bin/env python3
import os
import sys
import argparse
import socket


def main():
    parser = argparse.ArgumentParser(
        description="Writes all positional arguments (with some optional processing), to localhost:port. "
                    "If none given, takes stdin line by line."
    )
    parser.add_argument("strings", metavar="string", nargs="*")
    parser.add_argument("-m", "--mnt-path", action="store_true")
    parser.add_argument(
        "-a",
        "--abs-path",
        action="store_true",
        help="Interpret each argument as a path and convert to an absolute path",
    )
    parser.add_argument("-p", "--port", type=int, default=3141, help="Default: 3141")
    args = parser.parse_args()

    if args.strings:
        strings = [maybe_expand_path(s, args.mnt_path, args.abs_path) for s in args.strings]
        payload = " ".join(strings)
    else:
        strings = [maybe_expand_path(s.rstrip("\n"), args.mnt_path, args.abs_path) for s in sys.stdin]
        payload = "\n".join(strings)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(("localhost", args.port))
    sock.send(payload.encode("utf-8"))


def maybe_expand_path(string, mnt_path, abs_path):
    if not (mnt_path or abs_path):
        return string

    path = os.path.abspath(string)

    if mnt_path:
        host = socket.gethostname()
        if path.startswith("/home/"):
            return "~/mnt/{}/{}".format(host, path.replace("/home/", ""))
        elif path.startswith("/mnt"):
            return "~/mnt/{}-mnt/{}".format(host, path.replace("/mnt/", ""))
        # if the dir/file is not in /home or /mnt, just return its absolute path

    return path


main()
