alias py='python'
alias ipy='ipython'
alias x='chmod u+x'

# utility
alias reload='source ~/bin/dotfiles/bashrc'
alias ea='$EDITOR ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee='$EDITOR ~/bin/dotfiles/bash/env && reload'
alias ec='$EDITOR ~/bin/dotfiles/bash/config && reload'

# apt
alias ag='sudo apt-get'
alias agi='sudo apt-get install'


# ls
alias ls='ls -F --color=auto'
alias ll='ls -lh'
alias la='ls -A'
alias l.='ls -d .[^.]*'
alias l='ls'
alias lt='ls -lht' # sort with recently modified first
alias t=tree

# cd and directory stuff
alias ..='cd ..'
function cdl() { 
    cd $1; l
}
alias cdd='cd -'  # goto last dir cd'ed from
alias md='mkdir -p'
function take() {
    mkdir -p $1
    cd $1
}

# history
alias c='clear'
alias cl='clear; l'
alias h='history'
function stats() {
    history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# grep
alias grep='egrep --color=auto'

# git
alias g='git status -sb'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -a -v'
# commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gp='git push'
alias gll='git pull'
alias gl='git log --all --graph --decorate --oneline'
alias eg='$EDITOR .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}
# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}
